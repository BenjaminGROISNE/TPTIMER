
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  08000464  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  08000464  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800046c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000470  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000470  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000101b  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000337  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00003388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000009b  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dcce  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec5  00000000  00000000  000111d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004faff  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000234  00000000  00000000  00061be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00061e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800044c 	.word	0x0800044c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800044c 	.word	0x0800044c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <TIM2_init_pwm>:
 */
#include "main.h"
#include <stdint.h>
#include "stm32f4xx.h"

void TIM2_init_pwm(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	TIM2->PSC=SystemCoreClock/100000 - 1;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <TIM2_init_pwm+0x4c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	095b      	lsrs	r3, r3, #5
 800026e:	4a11      	ldr	r2, [pc, #68]	@ (80002b4 <TIM2_init_pwm+0x50>)
 8000270:	fba2 2303 	umull	r2, r3, r2, r3
 8000274:	09db      	lsrs	r3, r3, #7
 8000276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027a:	3b01      	subs	r3, #1
 800027c:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR= 100000 /1000 -1;
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	2263      	movs	r2, #99	@ 0x63
 8000284:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER=1;
 8000286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority(TIM2_IRQn,5);
 800028e:	2105      	movs	r1, #5
 8000290:	201c      	movs	r0, #28
 8000292:	f7ff ffbd 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000296:	201c      	movs	r0, #28
 8000298:	f7ff ff9c 	bl	80001d4 <__NVIC_EnableIRQ>
	TIM2->CR1|=1;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	0a7c5ac5 	.word	0x0a7c5ac5

080002b8 <TIM2_set_pwm>:

void TIM2_set_pwm(uint32_t duty){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
__WFI();
 80002c0:	bf30      	wfi
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <main>:

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80002d4:	4b15      	ldr	r3, [pc, #84]	@ (800032c <main+0x5c>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a14      	ldr	r2, [pc, #80]	@ (800032c <main+0x5c>)
 80002da:	f043 0305 	orr.w	r3, r3, #5
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR|=1;
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <main+0x5c>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <main+0x5c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
	//PA5 alternate function(01)
	GPIOA->MODER &=~(1<<10);//set 0
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <main+0x60>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000330 <main+0x60>)
 80002f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=1<<11;
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <main+0x60>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000330 <main+0x60>)
 80002fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000302:	6013      	str	r3, [r2, #0]
	// set afr to af01(0001);
	GPIOA->AFR[0]&=~(0xF<<20);
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <main+0x60>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <main+0x60>)
 800030a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800030e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=1<<20;
 8000310:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <main+0x60>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <main+0x60>)
 8000316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800031a:	6213      	str	r3, [r2, #32]
	TIM2_init_pwm();
 800031c:	f7ff ffa2 	bl	8000264 <TIM2_init_pwm>
	TIM2_set_pwm(5);
 8000320:	2005      	movs	r0, #5
 8000322:	f7ff ffc9 	bl	80002b8 <TIM2_set_pwm>
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000

08000334 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <HardFault_Handler+0x4>

0800034a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800034e:	bf00      	nop
 8000350:	e7fd      	b.n	800034e <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000356:	bf00      	nop
 8000358:	e7fd      	b.n	8000356 <BusFault_Handler+0x4>

0800035a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800035e:	bf00      	nop
 8000360:	e7fd      	b.n	800035e <UsageFault_Handler+0x4>

08000362 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <SystemInit+0x20>)
 8000392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000396:	4a05      	ldr	r2, [pc, #20]	@ (80003ac <SystemInit+0x20>)
 8000398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800039c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	@ (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f7ff ffd7 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f7ff ff75 	bl	80002d0 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80003ec:	0800046c 	.word	0x0800046c
  ldr  r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003f4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80003f8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003fc:	20000020 	.word	0x20000020

08000400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	@ (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	@ (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	@ (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	@ (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
